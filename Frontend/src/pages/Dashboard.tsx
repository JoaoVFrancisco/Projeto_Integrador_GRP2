import React, { useState } from 'react';
import { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { Factory, Power, AlertTriangle, Gauge, Package, FileText, Database, RefreshCcw, Users, LogOut } from 'lucide-react';
import { PDFDownloadLink, Document, Page, Text, View, StyleSheet } from '@react-pdf/renderer';
import { format } from 'date-fns';
import { Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

// ============================================================================
// ESTILOS PDF - Configuração de estilos para relatórios PDF
// ============================================================================

const styles = StyleSheet.create({
  page: { padding: 30, fontFamily: 'Helvetica' },
  title: { fontSize: 24, marginBottom: 20, color: '#16a34a', textAlign: 'center' },
  subtitle: { fontSize: 16, marginBottom: 15, color: '#4b5563' },
  section: { marginBottom: 20, padding: 10, backgroundColor: '#f9fafb' },
  heading: { fontSize: 18, marginBottom: 10, color: '#1f2937' },
  text: { fontSize: 12, marginBottom: 8, color: '#4b5563' },
  stats: { marginBottom: 15 },
  statTitle: { fontSize: 14, color: '#1f2937', marginBottom: 5 },
  footer: { position: 'absolute', bottom: 30, left: 30, right: 30, textAlign: 'center', color: '#6b7280', fontSize: 10 },
});

// ============================================================================
// COMPONENTE PDF - Template para geração de relatórios
// ============================================================================

const ProductionReport = ({ data, inventoryData, stats }: any) => (
  <Document>
    <Page size="A4" style={styles.page}>
      <Text style={styles.title}>Lopes Solutions Production Report</Text>
      <Text style={styles.subtitle}>{format(new Date(), 'PPP')}</Text>

      {/* Seção: Visão geral da produção */}
      <View style={styles.section}>
        <Text style={styles.heading}>Production Overview</Text>
        {data.map((item: any) => (
          <Text key={item.name} style={styles.text}>
            {item.name}: {item.value.toLocaleString()} units (Target: {item.target.toLocaleString()} units)
          </Text>
        ))}
      </View>

      {/* Seção: Indicadores de performance */}
      <View style={styles.section}>
        <Text style={styles.heading}>Key Performance Indicators</Text>
        <View style={styles.stats}>
          <Text style={styles.statTitle}>Energy Consumption</Text>
          <Text style={styles.text}>
            Current: {stats.energyConsumption} MWh (Target: {stats.targetEnergyConsumption} MWh)
          </Text>
        </View>
        <View style={styles.stats}>
          <Text style={styles.statTitle}>Rework Rate</Text>
          <Text style={styles.text}>
            {stats.defectivePieces} defective pieces out of {stats.totalProduction} total pieces ({stats.reworkRate}%)
          </Text>
        </View>
        <View style={styles.stats}>
          <Text style={styles.statTitle}>Operational Efficiency</Text>
          <Text style={styles.text}>{stats.operationalEfficiency}%</Text>
        </View>
      </View>

      {/* Seção: Níveis de estoque */}
      <View style={styles.section}>
        <Text style={styles.heading}>Inventory Levels</Text>
        {inventoryData.map((item: any) => (
          <Text key={item.name} style={styles.text}>
            {item.name}: {item.stock}/{item.capacity} units ({((item.stock / item.capacity) * 100).toFixed(1)}% capacity)
          </Text>
        ))}
      </View>

      <Text style={styles.footer}>
        Generated by Lopes Solutions Production Management System
      </Text>
    </Page>
  </Document>
);

// ============================================================================
// DADOS INICIAIS - Configuração de dados mock para demonstração
// ============================================================================

// Dados de produção por período
const initialProductionData = {
  daily: [
    { name: '00:00', value: 150, target: 180 },
    { name: '04:00', value: 200, target: 220 },
    { name: '08:00', value: 350, target: 380 },
    { name: '12:00', value: 400, target: 420 },
    { name: '16:00', value: 300, target: 320 },
    { name: '20:00', value: 250, target: 280 }
  ],
  monthly: [
    { name: 'Jan', value: 4500, target: 5000 },
    { name: 'Feb', value: 5000, target: 5200 },
    { name: 'Mar', value: 4800, target: 5100 },
    { name: 'Apr', value: 5200, target: 5300 },
    { name: 'May', value: 5100, target: 5400 },
    { name: 'Jun', value: 4900, target: 5200 }
  ],
  annual: [
    { name: '2019', value: 55000, target: 58000 },
    { name: '2020', value: 52000, target: 56000 },
    { name: '2021', value: 58000, target: 60000 },
    { name: '2022', value: 61000, target: 63000 },
    { name: '2023', value: 63000, target: 65000 },
    { name: '2024', value: 32000, target: 34000 }
  ]
};

// Dados de estoque inicial
const initialInventoryData = [
  { name: 'Steel Coils', stock: 85, capacity: 100 },
  { name: 'Steel Plates', stock: 65, capacity: 100 },
  { name: 'Steel Bars', stock: 45, capacity: 100 },
  { name: 'Steel Tubes', stock: 75, capacity: 100 },
  { name: 'Steel Sheets', stock: 90, capacity: 100 }
];

// Estatísticas iniciais do sistema
const initialStats = {
  energyConsumption: 2450,
  targetEnergyConsumption: 2200,
  defectivePieces: 115,
  totalProduction: 5000,
  reworkRate: ((115 / 5000) * 100).toFixed(1),
  operationalEfficiency: 0 // Will be calculated
};

// Cálculo da eficiência operacional inicial
initialStats.operationalEfficiency = Number((
  (initialProductionData.daily.reduce((sum, item) => sum + item.value, 0) / 
   initialProductionData.daily.reduce((sum, item) => sum + item.target, 0)) *
  (initialStats.targetEnergyConsumption / initialStats.energyConsumption) *
  (1 - initialStats.defectivePieces / initialStats.totalProduction) *
  100
).toFixed(1));

// ============================================================================
// COMPONENTE PRINCIPAL - Dashboard
// ============================================================================

export default function Dashboard() {
  // ========================================================================
  // HOOKS E ESTADO - Gerenciamento de estado do componente
  // ========================================================================
  
  const { user, logout, isAdmin } = useAuth();
  const [timeframe, setTimeframe] = useState<'daily' | 'monthly' | 'annual'>('daily');
  const [productionData, setProductionData] = useState(initialProductionData);
  const [inventoryData, setInventoryData] = useState(initialInventoryData);
  const [stats, setStats] = useState(initialStats);
  const [showDataForm, setShowDataForm] = useState(false);
  const [dataType, setDataType] = useState<'production' | 'energy' | 'failures'>('production');
  const [newData, setNewData] = useState({ 
    name: '', 
    value: '', 
    target: '',
    energyConsumption: '',
    targetEnergyConsumption: '',
    defectivePieces: '',
    totalProduction: ''
  });

  // ========================================================================
  // FUNÇÕES UTILITÁRIAS - Helpers para cálculos e formatação
  // ========================================================================
  
  // Função para calcular eficiência operacional
  const calculateOperationalEfficiency = (
    actualProduction: number,
    targetProduction: number,
    actualEnergy: number,
    targetEnergy: number,
    defectivePieces: number,
    totalProduction: number
  ) => {
    return Number((
      (actualProduction / targetProduction) *
      (targetEnergy / actualEnergy) *
      (1 - defectivePieces / totalProduction) *
      100
    ).toFixed(1));
  };

  // Função para gerar dados aleatórios para demonstração
  const generateRandomData = () => {
    const generateDataPoint = (baseValue: number, variance: number) => {
      const value = Math.floor(Math.random() * variance) + baseValue;
      const target = value + Math.floor(Math.random() * (variance * 0.2)) + Math.floor(variance * 0.1);
      return { value, target };
    };

    const newProductionData = {
      daily: Array.from({ length: 6 }, (_, i) => ({
        name: `${String(i * 4).padStart(2, '0')}:00`,
        ...generateDataPoint(100, 300)
      })),
      monthly: Array.from({ length: 6 }, (_, i) => ({
        name: format(new Date(2024, i, 1), 'MMM'),
        ...generateDataPoint(4000, 1000)
      })),
      annual: Array.from({ length: 6 }, (_, i) => ({
        name: String(2019 + i),
        ...generateDataPoint(50000, 15000)
      }))
    };

    const newInventoryData = initialInventoryData.map(item => ({
      ...item,
      stock: Math.floor(Math.random() * item.capacity)
    }));

    const totalProduction = newProductionData[timeframe].reduce((sum, item) => sum + item.value, 0);
    const targetProduction = newProductionData[timeframe].reduce((sum, item) => sum + item.target, 0);
    const defectivePieces = Math.floor(totalProduction * (Math.random() * 0.03 + 0.01));
    const reworkRate = ((defectivePieces / totalProduction) * 100).toFixed(1);

    const energyConsumption = Math.floor(Math.random() * 1000) + 2000;
    const targetEnergyConsumption = Math.floor(energyConsumption * 0.9);

    const operationalEfficiency = calculateOperationalEfficiency(
      totalProduction,
      targetProduction,
      energyConsumption,
      targetEnergyConsumption,
      defectivePieces,
      totalProduction
    );

    const newStats = {
      energyConsumption,
      targetEnergyConsumption,
      defectivePieces,
      totalProduction,
      reworkRate,
      operationalEfficiency
    };

    setProductionData(newProductionData);
    setInventoryData(newInventoryData);
    setStats(newStats);
  };

  // ========================================================================
  // HANDLERS - Funções de manipulação de eventos
  // ========================================================================
  
  // Handler para submissão de novos dados
  const handleDataSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (dataType === 'production') {
      const updatedData = [...productionData[timeframe]];
      updatedData.push({
        name: newData.name,
        value: parseInt(newData.value),
        target: parseInt(newData.target)
      });
      setProductionData({
        ...productionData,
        [timeframe]: updatedData
      });
    } else if (dataType === 'energy') {
      const newStats = {
        ...stats,
        energyConsumption: parseInt(newData.energyConsumption),
        targetEnergyConsumption: parseInt(newData.targetEnergyConsumption)
      };
      
      // Recalcular eficiência operacional
      const totalProduction = productionData[timeframe].reduce((sum, item) => sum + item.value, 0);
      const targetProduction = productionData[timeframe].reduce((sum, item) => sum + item.target, 0);
      
      newStats.operationalEfficiency = calculateOperationalEfficiency(
        totalProduction,
        targetProduction,
        newStats.energyConsumption,
        newStats.targetEnergyConsumption,
        newStats.defectivePieces,
        newStats.totalProduction
      );
      
      setStats(newStats);
    } else if (dataType === 'failures') {
      const defectivePieces = parseInt(newData.defectivePieces);
      const totalProduction = parseInt(newData.totalProduction);
      const reworkRate = ((defectivePieces / totalProduction) * 100).toFixed(1);
      
      const newStats = {
        ...stats,
        defectivePieces,
        totalProduction,
        reworkRate
      };
      
      // Recalcular eficiência operacional
      const actualProduction = productionData[timeframe].reduce((sum, item) => sum + item.value, 0);
      const targetProduction = productionData[timeframe].reduce((sum, item) => sum + item.target, 0);
      
      newStats.operationalEfficiency = calculateOperationalEfficiency(
        actualProduction,
        targetProduction,
        newStats.energyConsumption,
        newStats.targetEnergyConsumption,
        newStats.defectivePieces,
        newStats.totalProduction
      );
      
      setStats(newStats);
    }
    
    setNewData({ 
      name: '', 
      value: '', 
      target: '',
      energyConsumption: '',
      targetEnergyConsumption: '',
      defectivePieces: '',
      totalProduction: ''
    });
    setShowDataForm(false);
  };

  // Handler para resetar formulário
  const resetForm = () => {
    setNewData({ 
      name: '', 
      value: '', 
      target: '',
      energyConsumption: '',
      targetEnergyConsumption: '',
      defectivePieces: '',
      totalProduction: ''
    });
  };

  // Handler para mudança de tipo de dados
  const handleDataTypeChange = (type: 'production' | 'energy' | 'failures') => {
    setDataType(type);
    
    if (type === 'failures') {
      // Auto-preencher produção total com dados atuais
      const currentTotalProduction = productionData[timeframe].reduce((sum, item) => sum + item.value, 0);
      setNewData({ 
        name: '', 
        value: '', 
        target: '',
        energyConsumption: '',
        targetEnergyConsumption: '',
        defectivePieces: '',
        totalProduction: currentTotalProduction.toString()
      });
    } else {
      resetForm();
    }
  };

  // ========================================================================
  // RENDERIZAÇÃO - Interface do usuário
  // ========================================================================
  
  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        
        {/* ================================================================ */}
        {/* HEADER - Cabeçalho com título, informações do usuário e ações */}
        {/* ================================================================ */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center space-x-3">
            <Factory className="h-8 w-8 text-green-600" />
            <h1 className="text-2xl font-bold text-gray-900">Dashboard de Produção</h1>
          </div>
          <div className="flex items-center space-x-4">
            <span className="text-sm text-gray-600">
              Bem-vindo, <span className="font-medium">{user?.name}</span>
            </span>
            {isAdmin() && (
              <Link
                to="/users"
                className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
              >
                <Users className="h-5 w-5" />
                <span>Gerenciar Usuários</span>
              </Link>
            )}
            <button
              onClick={logout}
              className="flex items-center space-x-2 px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700"
            >
              <LogOut className="h-5 w-5" />
              <span>Sair</span>
            </button>
          </div>
        </div>

        {/* ================================================================ */}
        {/* BARRA DE AÇÕES - Botões para adicionar dados e gerar relatórios */}
        {/* ================================================================ */}
        <div className="flex space-x-4 mb-8">
          <button
            onClick={() => setShowDataForm(!showDataForm)}
            className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
          >
            <Database className="h-5 w-5" />
            <span>Adicionar Dados</span>
          </button>
          <button
            onClick={generateRandomData}
            className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
          >
            <RefreshCcw className="h-5 w-5" />
            <span>Gerar Dados Aleatórios</span>
          </button>
          <PDFDownloadLink
            document={<ProductionReport data={productionData[timeframe]} inventoryData={inventoryData} stats={stats} />}
            fileName={`production-report-${format(new Date(), 'yyyy-MM-dd')}.pdf`}
            className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
          >
            <FileText className="h-5 w-5" />
            <span>Gerar Relatório</span>
          </PDFDownloadLink>
        </div>

        {/* ================================================================ */}
        {/* FORMULÁRIO DE DADOS - Modal para adicionar novos dados */}
        {/* ================================================================ */}
        {showDataForm && (
          <div className="bg-white p-6 rounded-lg shadow-md mb-8">
            <h2 className="text-xl font-semibold text-gray-800 mb-4">Adicionar Novos Dados</h2>
            
            {/* Seleção do tipo de dados */}
            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-2">Tipo de Dados</label>
              <div className="flex space-x-4">
                <button
                  type="button"
                  onClick={() => handleDataTypeChange('production')}
                  className={`px-4 py-2 rounded-md ${
                    dataType === 'production'
                      ? 'bg-green-600 text-white'
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  }`}
                >
                  Dados de Produção
                </button>
                <button
                  type="button"
                  onClick={() => handleDataTypeChange('energy')}
                  className={`px-4 py-2 rounded-md ${
                    dataType === 'energy'
                      ? 'bg-green-600 text-white'
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  }`}
                >
                  Consumo Energético
                </button>
                <button
                  type="button"
                  onClick={() => handleDataTypeChange('failures')}
                  className={`px-4 py-2 rounded-md ${
                    dataType === 'failures'
                      ? 'bg-green-600 text-white'
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  }`}
                >
                  Dados de Falhas
                </button>
              </div>
            </div>

            {/* Formulário dinâmico baseado no tipo selecionado */}
            <form onSubmit={handleDataSubmit} className="space-y-4">
              {dataType === 'production' && (
                <>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Nome/Período</label>
                    <input
                      type="text"
                      value={newData.name}
                      onChange={(e) => setNewData({ ...newData, name: e.target.value })}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Produção Real</label>
                    <input
                      type="number"
                      value={newData.value}
                      onChange={(e) => setNewData({ ...newData, value: e.target.value })}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Meta de Produção</label>
                    <input
                      type="number"
                      value={newData.target}
                      onChange={(e) => setNewData({ ...newData, target: e.target.value })}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
                      required
                    />
                  </div>
                </>
              )}

              {dataType === 'energy' && (
                <>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Consumo Energético Real (MWh)</label>
                    <input
                      type="number"
                      value={newData.energyConsumption}
                      onChange={(e) => setNewData({ ...newData, energyConsumption: e.target.value })}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Meta de Consumo Energético (MWh)</label>
                    <input
                      type="number"
                      value={newData.targetEnergyConsumption}
                      onChange={(e) => setNewData({ ...newData, targetEnergyConsumption: e.target.value })}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
                      required
                    />
                  </div>
                </>
              )}

              {dataType === 'failures' && (
                <>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Peças Defeituosas</label>
                    <input
                      type="number"
                      value={newData.defectivePieces}
                      onChange={(e) => setNewData({ ...newData, defectivePieces: e.target.value })}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">
                      Produção Total 
                      <span className="text-sm text-gray-500 ml-2">(Preenchido automaticamente com dados atuais de produção)</span>
                    </label>
                    <input
                      type="number"
                      value={newData.totalProduction}
                      onChange={(e) => setNewData({ ...newData, totalProduction: e.target.value })}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 bg-gray-50"
                      required
                      readOnly
                    />
                  </div>
                </>
              )}

              {/* Botões de ação do formulário */}
              <div className="flex space-x-4">
                <button
                  type="submit"
                  className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700"
                >
                  Adicionar Dados
                </button>
                <button
                  type="button"
                  onClick={() => setShowDataForm(false)}
                  className="bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400"
                >
                  Cancelar
                </button>
              </div>
            </form>
          </div>
        )}

        {/* ================================================================ */}
        {/* GRÁFICO DE PRODUÇÃO - Visualização principal dos dados */}
        {/* ================================================================ */}
        <div className="bg-white p-6 rounded-lg shadow-md mb-8">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-semibold text-gray-800">Visão Geral da Produção</h2>
            
            {/* Seletores de período */}
            <div className="flex space-x-2">
              {(['daily', 'monthly', 'annual'] as const).map((t) => (
                <button
                  key={t}
                  onClick={() => setTimeframe(t)}
                  className={`px-4 py-2 rounded ${
                    timeframe === t
                      ? 'bg-green-600 text-white'
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  }`}
                >
                  {t === 'daily' ? 'Diário' : t === 'monthly' ? 'Mensal' : 'Anual'}
                </button>
              ))}
            </div>
          </div>
          
          {/* Gráfico de linha da produção */}
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={productionData[timeframe]}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Line type="monotone" dataKey="value" name="Produção Real" stroke="#16a34a" strokeWidth={2} />
                <Line type="monotone" dataKey="target" name="Meta de Produção" stroke="#4ade80" strokeWidth={2} strokeDasharray="5 5" />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* ================================================================ */}
        {/* CARDS DE MÉTRICAS - Indicadores principais de performance */}
        {/* ================================================================ */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          
          {/* Card: Consumo Energético */}
          <div className="bg-white p-6 rounded-lg shadow-md">
            <div className="flex items-center space-x-3 mb-4">
              <Power className="h-6 w-6 text-green-500" />
              <h3 className="text-lg font-semibold text-gray-800">Consumo Energético</h3>
            </div>
            <p className="text-3xl font-bold text-green-500">{stats.energyConsumption} MWh</p>
            <p className="text-sm text-gray-500 mt-2">
              Meta: {stats.targetEnergyConsumption} MWh
              <br />
              Diferença: {(stats.energyConsumption - stats.targetEnergyConsumption).toLocaleString()} MWh
            </p>
          </div>

          {/* Card: Taxa de Retrabalho */}
          <div className="bg-white p-6 rounded-lg shadow-md">
            <div className="flex items-center space-x-3 mb-4">
              <AlertTriangle className="h-6 w-6 text-red-500" />
              <h3 className="text-lg font-semibold text-gray-800">Taxa de Retrabalho</h3>
            </div>
            <p className="text-3xl font-bold text-red-500">{stats.reworkRate}%</p>
            <p className="text-sm text-gray-500 mt-2">
              {stats.defectivePieces} peças defeituosas de {stats.totalProduction} total
            </p>
          </div>

          {/* Card: Eficiência Operacional */}
          <div className="bg-white p-6 rounded-lg shadow-md">
            <div className="flex items-center space-x-3 mb-4">
              <Gauge className="h-6 w-6 text-green-500" />
              <h3 className="text-lg font-semibold text-gray-800">Eficiência Operacional</h3>
            </div>
            <p className="text-3xl font-bold text-green-500">{stats.operationalEfficiency}%</p>
            <p className="text-sm text-gray-500 mt-2">Efetividade geral dos equipamentos</p>
          </div>
        </div>

        {/* ================================================================ */}
        {/* GRÁFICO DE ESTOQUE - Visualização dos níveis de inventário */}
        {/* ================================================================ */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <div className="flex items-center space-x-3 mb-6">
            <Package className="h-6 w-6 text-green-600" />
            <h2 className="text-xl font-semibold text-gray-800">Níveis de Estoque</h2>
          </div>
          
          {/* Gráfico de barras do estoque */}
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={inventoryData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Bar dataKey="stock" fill="#16a34a" name="Estoque Atual" />
                <Bar dataKey="capacity" fill="#d1d5db" name="Capacidade Total" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>
    </div>
  );
}